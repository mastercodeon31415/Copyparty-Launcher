using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Copyparty_Launcher_GUI.Logic
{
    public static class ConfigGenerator
    {
        private static void AppendIf(StringBuilder sb, bool condition, string text)
        {
            if (condition) sb.AppendLine($"  {text}");
        }

        private static void AppendIfVal(StringBuilder sb, string value, string key)
        {
            if (!string.IsNullOrWhiteSpace(value)) sb.AppendLine($"  {key}: {value}");
        }

        public static string Generate(CopyPartySettings s)
        {
            var sb = new StringBuilder();
            sb.AppendLine("# copyparty configuration file generated by GUI");
            sb.AppendLine();

            // [accounts]
            if (s.Accounts.Any())
            {
                sb.AppendLine("[accounts]");
                foreach (var account in s.Accounts)
                {
                    sb.AppendLine($"  {account.Username}: {account.Password}");
                }
                sb.AppendLine();
            }

            // [groups]
            if (s.Groups.Any())
            {
                sb.AppendLine("[groups]");
                foreach (var group in s.Groups)
                {
                    sb.AppendLine($"  {group.Name}: {group.Members}");
                }
                sb.AppendLine();
            }

            // [global]
            sb.AppendLine("[global]");
            AppendIfVal(sb, s.MaxClients.ToString(), "nc");
            AppendIfVal(sb, s.Cores.ToString(), "j");
            AppendIfVal(sb, s.ServerName, "name");
            AppendIf(sb, s.Usernames, "usernames");
            AppendIf(sb, s.EnableDots, "ed");
            AppendIf(sb, s.RMagic, "rmagic");
            AppendIfVal(sb, s.Ip, "i");
            AppendIfVal(sb, s.Port, "p");
            AppendIf(sb, s.ReuseAddr, "reuseaddr");
            AppendIf(sb, s.HttpOnly, "http-only");
            AppendIf(sb, s.HttpsOnly, "https-only");
            AppendIfVal(sb, s.CertPath, "cert");
            // ... and so on for all other global flags ...
            sb.AppendLine();


            // Volumes
            foreach (var vol in s.Volumes)
            {
                sb.AppendLine($"[{vol.DestPath}]");
                sb.AppendLine($"  {vol.SourcePath}");

                if (vol.Permissions.Any())
                {
                    sb.AppendLine("  accs:");
                    foreach (var perm in vol.Permissions)
                    {
                        sb.AppendLine($"    {perm.Type}: {perm.Users}");
                    }
                }

                if (vol.Flags.Any())
                {
                    sb.AppendLine("  flags:");
                    var flagStrings = vol.Flags.Select(f => string.IsNullOrWhiteSpace(f.Value) ? f.Name : $"{f.Name}: {f.Value}");
                    sb.AppendLine($"    {string.Join(", ", flagStrings)}");
                }
                sb.AppendLine();
            }

            return sb.ToString();
        }
    }
}
